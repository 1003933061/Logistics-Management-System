/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.global.struts.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.global.dao.BaseDao;
import com.global.dao.CarDao;
import com.global.dao.DeliverySpotDao;
import com.global.dao.LineDao;
import com.global.dao.LineDetaileDao;
import com.global.struts.form.LineForm;
import com.global.vo.Car;
import com.global.vo.Carstate;
import com.global.vo.Deliveryspot;
import com.global.vo.Line;
import com.global.vo.Linedetaile;

/** 
 * MyEclipse Struts
 * Creation date: 11-24-2008
 * 
 * XDoclet definition:
 * @struts.action path="/line" name="lineForm" input="/lineManage/addLine.jsp" scope="request" validate="true"
 */
public class LineAction extends BaseDispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	/*
	 * 保存新线路
	 */
	public ActionForward saveLine(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LineForm lineForm = (LineForm) form;
        String[] lineNames = request.getParameterValues("right_select");
        String length = request.getParameter("length").trim();
  
        String startNameID = lineNames[0];
        String endNameID = lineNames[lineNames.length-1];
        
        DeliverySpotDao dsdao = (DeliverySpotDao) super.getBean("DeliverySpotDao");
        Deliveryspot startds = dsdao.queryDeliverySpotByDeliverySpotID(new Integer(startNameID));
        Deliveryspot endds = dsdao.queryDeliverySpotByDeliverySpotID(new Integer(endNameID));
        
        String lineName= startds.getName() +"-"+ endds.getName();
        
        
        BaseDao bdao = (BaseDao) super.getBean("BaseDao");
        String timeNumber = bdao.getCurrentDateFromDB2();
        
        Date d = new Date();
        
        String lineno = "G" + d.getTime();
        
        LineDao linedao = (LineDao) super.getBean("LineDao");
        Line line = new Line();
        line.setLinename(lineName);
        line.setLength(new Double(length));
        line.setLineno(lineno);
        linedao.addLine(line);
        
        //在线路详细信息中记录该条新线路的具体信息
        LineDetaileDao lineDetailedao = (LineDetaileDao) super.getBean("LineDetaileDao");
        for (int i = 0; i < lineNames.length; i++) {
        	
        	Linedetaile lineDetaile = new Linedetaile();
        	lineDetaile.setLine(line);
        	
        	Deliveryspot lineds = dsdao.queryDeliverySpotByDeliverySpotID(new Integer(lineNames[i]));
        	lineDetaile.setDeliveryspot(lineds);
        	
        	lineDetaile.setLineindex(new Integer(i+1));
        	
        	lineDetailedao.addLineDetaile(lineDetaile);
		}
		return listAllLine(mapping,form,request,response);
	}
	
	/*
	 * 列出所有线路，用于分页查询
	 */
	public ActionForward listAllLine(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LineDao linedao = (LineDao) super.getBean("LineDao");
		
		String offset = request.getParameter("pager.offset");
	     int intOffset = 0;
	     
	     if(offset != null){
	    	 intOffset = new Integer(offset).intValue();
	     }
	     int count  = linedao.countOfAllLine();
		
		List allLineList = linedao.queryAllLine(intOffset,10);	
        request.setAttribute("allLineList", allLineList);
        request.setAttribute("count", count);
		return mapping.findForward("viewLine");
	}
	
	/*
	 * 删除线路
	 */
	public ActionForward deleteLine(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LineForm lineForm = (LineForm) form;
		String[] lineids = request.getParameterValues("lineids");
		LineDao linedao = (LineDao) super.getBean("LineDao");
		
		for (int i = 0; i < lineids.length; i++) {
			Line line = linedao.querylineByLineID(new Integer(lineids[i]));
			linedao.deleteLine(line);
		}
        return listAllLine(mapping,form,request,response);
	}
	
	/*
	 * 线路配车时，初始化新购车辆列表
	 */
	public ActionForward intiMatchingLine(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LineForm lineForm = (LineForm) form;
		
		LineDao linedao = (LineDao) super.getBean("LineDao");
		
		List newCarList = linedao.queryCarNotMatchingLine();
		
		request.setAttribute("newCarList", newCarList);
		
        return listAllMatchingLine(mapping,form,request,response);
	}
	
	/*
	 * 保存线路配车
	 */
	public ActionForward matchingLine(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LineForm lineForm = (LineForm) form;
        String lineID = request.getParameter("lineID");
        String carID = request.getParameter("carID");
        String leaveTime = request.getParameter("leaveTime");
        
        CarDao cardao = (CarDao) super.getBean("CarDao");
        LineDao linedao = (LineDao) super.getBean("LineDao");
        
        Car car = cardao.queryCarByCarID(new Integer(carID));
        Line line = linedao.querylineByLineID(new Integer(lineID));
        
        car.setLine(line);
    	car.setLeavetime(leaveTime);
    	
    	Carstate caestate = linedao.querylineByCarStateID(4);
    	car.setCarstate(caestate);
        
        cardao.updateCar(car);
        return intiMatchingLine(mapping,form,request,response);
	}
	
	/*
	 * 分页列出所有线路配车
	 */
	public ActionForward listAllMatchingLine(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LineForm lineForm = (LineForm) form;
       
		LineDao linedao = (LineDao) super.getBean("LineDao");
		
		String offset = request.getParameter("pager.offset");
	     int intOffset = 0;
	     
	     if(offset != null){
	    	 intOffset = new Integer(offset).intValue();
	     }
	     
	     int count = linedao.countqueryCarMatchingLine();
	     List carAndLineList = linedao.queryCarMatchingLine(intOffset, 8);
		request.setAttribute("carAndLineList", carAndLineList);
		request.setAttribute("count", count);
        return mapping.findForward("matchingLine");
	}
	
	/*
	 * 查看某条线路的具体信息
	 */
	public ActionForward viewLineInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LineForm lineForm = (LineForm) form;
        String lineid = request.getParameter("id");
        LineDao linedao = (LineDao) super.getBean("LineDao");
        LineDetaileDao lineDetaileDao = (LineDetaileDao) super.getBean("LineDetaileDao");
        
        Line line = linedao.querylineByLineID(new Integer(lineid));
        List carOfLineList = linedao.queryCarByLineID(new Integer(lineid));
        
        List lineDetaileList = lineDetaileDao.queryLineDetaileByLineID(new Integer(lineid));
        
        request.setAttribute("line", line);
        request.setAttribute("carOfLineList", carOfLineList);
        request.setAttribute("lineDetaileList", lineDetaileList);

        return mapping.findForward("viewLineInfo");
	}
}